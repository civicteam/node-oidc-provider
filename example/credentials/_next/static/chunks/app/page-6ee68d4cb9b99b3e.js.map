{"version":3,"file":"static/chunks/app/page-6ee68d4cb9b99b3e.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/@civic/multichain-connect-react-core/lib/esm/assets/ lazy ^\\.\\/.*\\.svg$ strict namespace object","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/@ethersproject/bignumber/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/@ethersproject/signing-key/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/@identity.com/sol-did-client/node_modules/borsh/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/@solana/web3.js/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/@stablelib/random/lib/source|crypto","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/borsh/node_modules/bn.js/lib|buffer","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/brorand|crypto","webpack://_N_E/ignored|/Users/patrick/Code/credential-client/node_modules/tweetnacl|crypto","webpack://_N_E/?85eb","webpack://_N_E/../client/src/CredentialClient.ts","webpack://_N_E/../client/src/IdentityStoreClient.ts","webpack://_N_E/../client/src/constants.ts","webpack://_N_E/../client/src/index.ts","webpack://_N_E/../client/src/types.ts","webpack://_N_E/../client/src/version.ts","webpack://_N_E/./src/app/chains.ts","webpack://_N_E/./src/app/did.ts","webpack://_N_E/./src/app/BaseDialog.tsx","webpack://_N_E/./src/app/MultiWalletProvider.tsx","webpack://_N_E/./src/app/useAdapters.ts","webpack://_N_E/./src/app/CivicSignAuth.tsx","webpack://_N_E/./src/app/identityStore.ts","webpack://_N_E/./src/app/Content.tsx","webpack://_N_E/./src/app/page.tsx"],"sourcesContent":["var map = {\n\t\"./arbitrum.svg\": [\n\t\t92269,\n\t\t2269\n\t],\n\t\"./aurora.svg\": [\n\t\t50211,\n\t\t211\n\t],\n\t\"./avalanche.svg\": [\n\t\t59741,\n\t\t9741\n\t],\n\t\"./base.svg\": [\n\t\t10730,\n\t\t730\n\t],\n\t\"./celo.svg\": [\n\t\t35970,\n\t\t5970\n\t],\n\t\"./ethereum.svg\": [\n\t\t83734,\n\t\t3734\n\t],\n\t\"./fantom.svg\": [\n\t\t12120,\n\t\t2120\n\t],\n\t\"./optimism.svg\": [\n\t\t18086,\n\t\t8086\n\t],\n\t\"./palm.svg\": [\n\t\t59003,\n\t\t9003\n\t],\n\t\"./polygon.svg\": [\n\t\t57826,\n\t\t7826\n\t],\n\t\"./solana.svg\": [\n\t\t51020,\n\t\t1020\n\t],\n\t\"./xdc.svg\": [\n\t\t29818,\n\t\t9818\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 3655;\nmodule.exports = webpackAsyncContext;","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","import(/* webpackMode: \"eager\" */ \"/Users/patrick/Code/credential-client/packages/example-with-multichain-connect/src/app/page.tsx\");\n","import { LexiWallet } from \"@civic/lexi\";\nimport IdentityStoreClient from \"./IdentityStoreClient\";\nimport { \n    CredentialClientOptions, \n    CredentialSignerType, \n    SparseCredential, \n    WalletSigner, \n    StoreCredential, \n    ContentItem, \n    CreateStoreRequest,\n    ContentItemInternal,\n    InternalStoreCredential,\n    ContentItemInternalWithStringBlob,\n  } from \"./types\";\nimport { EncryptionPackage } from \"@civic/lexi/dist/lib/encrypt\";\nimport * as R from \"ramda\";\nimport { DEFAULT_STORAGE_PROVIDER } from \"./constants\";\n\nclass CredentialClient {\n    private identityStoreClient: IdentityStoreClient;\n    private publicSigningString: string;\n\n    constructor(readonly did: string, readonly options: CredentialClientOptions) {\n        const salt = crypto.getRandomValues(new Uint8Array(32));\n        this.publicSigningString = Buffer.from(salt).toString('base64');\n        this.identityStoreClient = new IdentityStoreClient(did, options.auth, options.identityStoreEndpoint);\n    }\n\n    public static create(did: string, options: CredentialClientOptions): CredentialClient {\n        return new CredentialClient(did, options);\n    }\n\n    /**\n     * Store a credential by encrypting content is a signer is provided, or \n     * @param request \n     */\n    public async store(request: CreateStoreRequest[]): Promise<void> {\n        if (this.options.signer?.type === CredentialSignerType.WALLET) {\n            const lexi = this.newLexi();\n            // TODO only separate and upload blobs to remote storage if a remote storage-provider is set in the request\n            await Promise.all(request.map(req => this.makeLexiStorageRequest(req, lexi)));\n            return;\n        }\n        await Promise.all(request.map(req => this.makeUnencryptedStorageRequest(req)));\n    }\n\n    private async makeUnencryptedStorageRequest(req: CreateStoreRequest): Promise<void> {\n        const blobs = req.content.map(c => Buffer.from(c.blob).toString('base64'));\n        const storeCredentialRequest = this.createStoreCredentialRequest(req, req.content.map(R.omit(['blob'])));\n        const storedCredentialsResponse = await this.identityStoreClient.storeCredential(storeCredentialRequest);\n        const contentWithBlobs = blobs.map((blob, index) => ({ ...storedCredentialsResponse.content[index], stringBlob: blob }));\n        await this.uploadBlobsToStorage(contentWithBlobs, req.credentialId);\n    }\n\n    private async makeLexiStorageRequest(req: CreateStoreRequest, lexi: LexiWallet): Promise<void> { \n        const encryptedBlobsAsJWEs = await this.encryptBlobsAsJWEs(lexi, req.content);\n        const encryptedContentArray = this.createEncryptedContentArray(req.content, encryptedBlobsAsJWEs);\n        const storeCredentialRequest = this.createStoreCredentialRequest(req, encryptedContentArray);\n\n        const storedCredentialsResponse = await this.identityStoreClient.storeCredential(storeCredentialRequest);\n        const contentWithBlobs = encryptedBlobsAsJWEs.map((encBlob, index) => ({ ...storedCredentialsResponse.content[index], stringBlob: encBlob.payload.ciphertext }));\n        await this.uploadBlobsToStorage(contentWithBlobs, req.credentialId);\n    }\n\n    private async encryptBlobsAsJWEs(lexi: LexiWallet, content: ContentItem[]): Promise<EncryptionPackage[]> {\n        return Promise.all(content.map(async(c) => lexi.encryptForMe(c.blob)));\n    }\n\n    private createEncryptedContentArray(content: ContentItem[], encryptedBlobsAsJWEs: EncryptionPackage[]): ContentItemInternal[] {\n        return content.map((contentItem, index) => {\n            const ciphertextOmitted = { ...encryptedBlobsAsJWEs[index], payload: R.omit(['ciphertext'], encryptedBlobsAsJWEs[index].payload as unknown as Record<string, unknown>) };\n            return { ...R.omit(['blob'], contentItem), encryptionMetadata: JSON.stringify(ciphertextOmitted) };\n        });\n    }\n\n    private createStoreCredentialRequest(request: CreateStoreRequest, contentArray: ContentItemInternal[]): InternalStoreCredential {\n        return {\n            credentialId: request.credentialId,\n            tags: [...new Set([...request.tags, ...request.content.map(c => c.name)])],\n            metadata: request.metadata,\n            content: contentArray,\n            storageProvider: request.storageProvider || DEFAULT_STORAGE_PROVIDER\n        };\n    }\n\n    private async uploadBlobsToStorage(content: ContentItemInternalWithStringBlob[], credentialId: string): Promise<void> {\n        await Promise.all(content.map(async(contentItem) => {\n            return this.identityStoreClient.storeDataToStorage(credentialId, contentItem, contentItem.stringBlob);\n        }));\n    }\n\n    public find(tags?: string[]): Promise<SparseCredential[]> {\n        return this.identityStoreClient.findCredentials(tags);\n    }\n\n    public async get(id: string): Promise<StoreCredential | null> {\n        const retrievedCredential = await this.identityStoreClient.getCredential(id);\n\n        if (!retrievedCredential) {\n            return null;\n        }\n        if (this.options.signer?.type === CredentialSignerType.WALLET) {\n            const lexi = this.newLexi();\n            const decryptedContentArray = await this.decryptContentArray(lexi, retrievedCredential.content);\n            return { ...retrievedCredential, content: decryptedContentArray };\n        }\n       \n\n        return { ...retrievedCredential, content: await this.retrieveContentArray(retrievedCredential.content) };\n    }\n\n    private async decryptContentArray(lexi: LexiWallet, content: ContentItemInternal[]): Promise<ContentItem[]> {\n        return Promise.all(content.map(async(contentItem: ContentItemInternal): Promise<ContentItem> => {\n            if(contentItem.format !== 'JWE') {\n                return contentItem as ContentItem;\n            }\n\n            if(!contentItem.encryptionMetadata) {\n                throw new Error('JWE content format but no encryption metadata!');\n            }\n\n            if(!contentItem.ref) {\n                throw new Error('JWE content format without ref!');\n            }\n\n            const encryptionMetadata = typeof contentItem.encryptionMetadata === 'string' ? JSON.parse(contentItem.encryptionMetadata) : contentItem.encryptionMetadata;\n            const encryptionPackage = encryptionMetadata as EncryptionPackage;\n\n            const ciphertext = await this.identityStoreClient.getDataFromStorage(contentItem);\n            if (!ciphertext) {\n                throw new Error('No ciphertext found in storage!');\n            }\n            encryptionPackage.payload.ciphertext = ciphertext;\n\n            const decryptedBlob = await lexi.decrypt(encryptionPackage);\n            return { ...R.omit([\"encryptionMetadata\", \"presignedUrl\", \"ref\"], contentItem), blob: decryptedBlob };\n        }));\n    }\n\n    private async retrieveContentArray(content: ContentItemInternal[]): Promise<ContentItem[]> {\n        return Promise.all(content.map(async(contentItem: ContentItemInternal): Promise<ContentItem> => {\n            const downloadedContent = await this.identityStoreClient.getDataFromStorage(contentItem);\n            if (!downloadedContent) {   \n                throw new Error('No content found in storage!');\n            }\n            return { ...R.omit([\"encryptionMetadata\", \"presignedUrl\", \"ref\"], contentItem), blob: Buffer.from(downloadedContent, 'base64') };\n        }));\n        \n    }\n\n    async delete(id: string): Promise<void> {\n        await this.identityStoreClient.deleteCredential(id);\n    }\n\n    private newLexi(): LexiWallet {\n        return new LexiWallet(this.options.signer as WalletSigner, this.did, { publicSigningString: this.publicSigningString, ...(this.options.lexi || {}) });\n    }\n}\n\nexport default CredentialClient;\n","import axios, { Axios } from 'axios';\nimport { ContentItemInternal, SparseCredential, InternalStoreCredential } from './types';\nimport { VERSION } from './version';\nimport crypto from 'crypto';\n\nexport const DEFAULT_IDENTITY_STORE_ENDPOINT = 'https://api.civic.com/identity-store/v2';\n\nclass IdentityStoreClient {\n    private axiosInstance: Axios;\n    private _evidenceAxiosInstance: Axios;\n    constructor(readonly did: string, readonly auth: string, readonly endpoint: string = DEFAULT_IDENTITY_STORE_ENDPOINT ) {\n        this.axiosInstance = axios.create({\n            baseURL: `${this.endpoint}/${this.did}`,\n            headers: {\n                'x-civic-client-version': VERSION,\n                Authorization: `Bearer ${this.auth}`,\n            },\n            //withCredentials: true\n          });\n    }\n\n    protected get evidenceAxiosInstance() {\n        this._evidenceAxiosInstance = axios.create({});\n        return this._evidenceAxiosInstance;\n    }\n\n    async getCredential(id: string): Promise<InternalStoreCredential | null> {\n        const response = await this.axiosInstance.get<InternalStoreCredential>(`/credential/${id}`);\n        return response.data || null;\n    }\n\n    async findCredentials(tags?: string[]): Promise<SparseCredential[]> {\n        const response = await this.axiosInstance.get<SparseCredential[]>('/credential', {\n            params: {\n                tags,\n            },\n            validateStatus: function (status) {\n                return (status >= 200 && status < 300) || status === 404; // allow the 'not found' status code\n            },\n        });\n        return response.data;\n    }\n\n    async storeCredential(credential: InternalStoreCredential): Promise<InternalStoreCredential> {\n        return (await this.axiosInstance.post<InternalStoreCredential>('/credential', credential)).data\n    }\n\n    async getDataFromStorage(contentItem: ContentItemInternal): Promise<string> {\n        if(!contentItem.presignedUrl) {\n            throw new Error('Trying to retrieve from undefined storage location!');\n        }\n\n        // we need to use a different axios instance than the store one, as the auth mechanism is different\n        const response = await this.evidenceAxiosInstance.get(contentItem.presignedUrl, { responseType: 'arraybuffer' });\n\n        const base64String = Buffer.from(response.data, 'binary').toString('base64');\n        return base64String; \n    }\n\n    async storeDataToStorage(credentialId: string, contentItem: ContentItemInternal, blob: string) {\n        if(!contentItem.presignedUrl) {\n            throw new Error('Trying to store to undefined storage location!');\n        }\n\n        // Decode the base64 encryptedBlob to binary\n        const binaryBlob = Buffer.from(blob, 'base64');\n\n        // Use a different axios instance than the store one, as the auth mechanism is different\n        await this.evidenceAxiosInstance.put(contentItem.presignedUrl, binaryBlob, { headers: { 'Content-Type': 'application/octet-stream' } });\n\n        // Hash the encrypted binary blob\n        const hash = crypto.createHash('sha256').update(binaryBlob).digest('hex');\n        contentItem.ref = hash;\n\n        await this.axiosInstance.patch(`/credential/${credentialId}/content`, {\n            name: contentItem.name,\n            ref: contentItem.ref,\n        });\n    }\n\n    async deleteCredential(id: string): Promise<void> {\n        await this.axiosInstance.delete(`/credential/${id}`);\n    }\n}\n\nexport default IdentityStoreClient;\n","export const DEFAULT_STORAGE_PROVIDER = \"civic-s3\";\n","\nexport { default as CredentialClient } from './CredentialClient';\nexport * from './types';\nexport * from './constants';\n","import { LexiOptions } from \"@civic/lexi\";\n\nexport enum CredentialSignerType {\n    WALLET = 'WALLET',\n    PASSKEY = 'PASSKEY',\n}\nexport type WalletSigner = {\n    type: CredentialSignerType.WALLET;\n    signMessage: (message: Uint8Array) => Promise<Uint8Array>;\n};\n\nexport type PassKeySigner = {\n    type: CredentialSignerType.PASSKEY;\n    options: {\n        rpId: string;\n    };\n};\n\nexport type CredentialClientOptions = {\n    identityStoreEndpoint?: string;\n    auth: string;\n    signer?: WalletSigner | PassKeySigner;\n    lexi?: LexiOptions;\n};\n\nexport type ContentFormat = 'JSON' | 'JWE';\nexport type ContentItem = { \n  name: string;\n  mimeType: string;\n  format: ContentFormat;\n  sha256?: string;\n  blob: Uint8Array;\n}\nexport type ContentItemInternal = Omit<ContentItem, 'blob'> & {\n    encryptionMetadata?: string | Record<string, unknown>;\n    presignedUrl?: string;\n    ref?: string;\n};\n\nexport type ContentItemInternalWithStringBlob = ContentItemInternal & {\n    stringBlob: string;\n};\n\nexport type CredentialMetadata = {\n    issuanceDate: string; // mongo will auto-convert these to a date if they are ISO compliant\n    expirationDate?: string | null;\n};\n\nexport type CreateStoreRequest = {\n    credentialId: string;\n    tags: string[];\n    metadata: CredentialMetadata;\n    content: ContentItem[];\n    storageProvider?: string;\n};\n\nexport type SparseCredential = Omit<CreateStoreRequest, 'content'>;\n\nexport type InternalStoreCredential = Omit<CreateStoreRequest, 'content'> & {\n    storageProvider: string;\n    content: ContentItemInternal[];\n};\n\nexport type StoreCredential = Omit<CreateStoreRequest, 'content'> & {\n    content: ContentItem[];\n}\n","// This is an auto-generated file. Do not edit.\n\nexport const VERSION = '@civic/credential-client:0.1.1';\n","\"use client\"; // This is a client component\nimport { Chain as EthereumChain } from \"wagmi/chains\";\nimport {\n  mainnet,\n  sepolia,\n  goerli,\n  arbitrum,\n  arbitrumSepolia,\n  polygon,\n  polygonMumbai,\n  xdc,\n  xdcTestnet,\n  fantom,\n  fantomTestnet,\n  polygonZkEvm,\n  polygonZkEvmTestnet,\n  avalanche,\n  avalancheFuji,\n  base,\n  baseSepolia,\n  optimism,\n  optimismSepolia,\n} from \"wagmi/chains\";\nimport { Cluster, clusterApiUrl, PublicKey } from \"@solana/web3.js\";\n\nexport const evmChains: EthereumChain[] = [\n    { ...mainnet, name: \"Ethereum\" },\n    { ...arbitrum, name: \"Arbitrum\" },\n    { ...polygon, name: \"Polygon\" },\n    { ...xdc, name: \"XDC\" },\n    { ...fantom, name: \"Fantom\" },\n    { ...polygonZkEvm, name: \"Polygon zkEVM\" },\n    { ...avalanche, name: \"Avalanche\" },\n    { ...base, name: \"Base\" },\n    { ...optimism, name: \"Optimism\" },\n  ];\n  \nexport const evmTestChains: EthereumChain[] = [\n    { ...sepolia, name: \"Sepolia\" },\n    { ...goerli, name: \"Goerli\" },\n    { ...arbitrumSepolia, name: \"Arbitrum Sepolia\" },\n    { ...polygonMumbai, name: \"Polygon Mumbai\" },\n    { ...xdcTestnet, name: \"XDC Testnet\" },\n    { ...fantomTestnet, name: \"Fantom Testnet\" },\n    { ...polygonZkEvmTestnet, name: \"Polygon zkEVM Testnet\" },\n    { ...avalancheFuji, name: \"Avalanche Fuji\" },\n    { ...baseSepolia, name: \"Base Sepolia\" },\n    { ...optimismSepolia, name: \"Optimism Sepolia\" },\n  ];\n  \n  export type SolanaChain = {\n    name: string;\n    rpcEndpoint: string;\n  };\n  \nexport const solanaChains: SolanaChain[] = [\n    {\n      name: \"Solana\",\n      rpcEndpoint:\n        process.env.NEXT_PUBLIC_SOLANA_MAINNET_RPC || clusterApiUrl(\"mainnet-beta\"),\n    },\n  ];\n  \nexport const solanaTestChains: SolanaChain[] = [\n    {\n      name: \"Solana Devnet\",\n      rpcEndpoint:\n        process.env.NEXT_PUBLIC_SOLANA_DEVNET_RPC || clusterApiUrl(\"devnet\"),\n    },\n  ];\n  \n  export type SupportedEthereumNetworks =\n    | (typeof evmChains)[number]\n    | (typeof evmTestChains)[number];\n  \nexport function isSolanaAddress(address: string): boolean {\n    try {\n        // eslint-disable-next-line no-new\n        new PublicKey(address);\n        return true;\n    } catch (error) {\n        return false;\n    }\n    }\n","\"use client\"; // This is a client component\nimport * as R from 'ramda';\nimport { getAddress } from 'viem';\nimport { isSolanaAddress } from './chains';\n\nexport const resolveQueryToDid = (query?: string): string | undefined => {\n    if (query && !R.isEmpty(query)) {\n      if (query.match(/^did:/)) {\n        return query;\n      }\n  \n      // Ethereum\n      // For ethereum wallets, we use did:pkh:eip155:1: generative DID method\n      if (query.match(/^(0x)/g)) {\n        // Convert non-checksummed address into a checksummed address\n        return `did:pkh:eip155:1:${getAddress(query)}`;\n      }\n  \n      // Solana\n      if (isSolanaAddress(query)) {\n        return `did:sol:${query}`;\n      }\n    }\n  \n    return undefined;\n  }\n  ","import { Dialog, Transition } from \"@headlessui/react\";\nimport React, { CSSProperties, Fragment } from \"react\";\n\nconst defaultOnClose = () => ({});\nexport default function BaseDialog({\n  isOpen,\n  onClose,\n  title,\n  contentClassName,\n  withPadding,\n  children,\n  withOverlay = true,\n}: {\n  isOpen: boolean;\n  onClose?: () => void;\n  title?: string;\n  contentClassName?: string;\n  withPadding?: boolean;\n  children: React.ReactChild;\n  withOverlay?: boolean;\n}): React.ReactElement | null {\n  const extraStyles: CSSProperties = {\n    backdropFilter: \"blur(2rem)\",\n    borderRadius: \"20px\",\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog as=\"div\" onClose={onClose || defaultOnClose}>\n        {/* {withOverlay && (\n          <div className=\"fixed inset-0 z-[101] rounded-2xl bg-gray-900/60\" />\n        )} */}\n        <Dialog.Panel className=\"h-screen w-screen items-center justify-center overflow-y-auto overflow-x-hidden align-middle outline-none focus:outline-none\">\n          {title && <Dialog.Title>{title}</Dialog.Title>}\n          <div\n            className={`absolute left-1/2 top-1/2 z-[102] mx-auto -translate-x-1/2 -translate-y-1/2 transform p-4 md:h-auto ${contentClassName} w-full`}\n          >\n            <div\n              style={extraStyles}\n              className={`shadow-[rgba(19, 21, 30, 0.65)] flex-col border-0 bg-gradient-to-tl from-backgroundGradientFrom to-quaternary shadow-2xl outline-none focus:outline-none ${\n                withPadding ? \"p-12\" : \"\"\n              } text-textPrimary`}\n            >\n              {onClose !== defaultOnClose && (\n                <button\n                  type=\"button\"\n                  className=\"absolute right-6 top-6 ml-auto mr-1 mt-1 inline-flex cursor-pointer items-center rounded-lg bg-transparent p-1.5 text-sm text-gray-400 outline-secondary hover:bg-gray-200 sm:right-2.5 sm:top-3\"\n                  onClick={onClose}\n                >\n                  <svg\n                    className=\"h-5 w-5\"\n                    fill=\"currentColor\"\n                    viewBox=\"0 0 20 20\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n                      clipRule=\"evenodd\"\n                    />\n                  </svg>\n                </button>\n              )}\n              <div>{children}</div>\n            </div>\n          </div>\n        </Dialog.Panel>\n      </Dialog>\n    </Transition>\n  );\n}\n\nBaseDialog.defaultProps = {\n  contentClassName: \"\",\n  title: undefined,\n  withPadding: true,\n  withOverlay: true,\n  onClose: defaultOnClose,\n};\n","\"use client\"; // This is a client component\nimport {\n  SupportedChains,\n  useWallet,\n} from \"@civic/multichain-connect-react-core\";\nimport { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport React, {\n  ReactChild,\n  ReactElement,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  useRainbowkitAdapterModal,\n  useDisconnect,\n  useWalletClient,\n  WalletClient,\n} from \"@civic/multichain-connect-react-rainbowkit-wallet-adapter\";\nimport { useSolanaWalletAdapterModal } from \"@civic/multichain-connect-react-solana-wallet-adapter\";\nimport { resolveQueryToDid } from \"./did\";\nimport BaseDialog from \"./BaseDialog\";\n\nexport type WalletReference = (WalletContextState | WalletClient) & {\n  address: string;\n};\n\nexport type ConnectWalletOptions = {\n  onWalletConnectedValidation?: (address: string) => boolean;\n};\n\nexport interface MultiWalletContextState {\n  connectWallet: (options?: ConnectWalletOptions) => Promise<WalletReference>;\n  disconnect: (() => void) | undefined;\n  did?: string;\n  address?: string;\n  chain?: SupportedChains;\n  solanaWallet?: WalletContextState;\n  evmWallet?: WalletClient;\n  connected: boolean;\n  isConnecting: boolean;\n}\n\nconst MultiWalletContext = React.createContext<MultiWalletContextState>(\n  {} as MultiWalletContextState\n);\n\nexport default function MultiWalletProvider({\n  children,\n}: {\n  children: ReactChild;\n}): ReactElement {\n  const [isConnectionRequested, setIsConnectionRequested] =\n    React.useState<boolean>(false);\n  const [isConnecting, setIsConnecting] = React.useState<boolean>(false);\n  const { openConnectModal: openEvmModal } = useRainbowkitAdapterModal();\n  const { openConnectModal: openSolanaModal } = useSolanaWalletAdapterModal();\n  const { data: walletClient } = useWalletClient();\n  const { disconnect: evmDisconnect } = useDisconnect();\n  const { connected, disconnect, chain } = useWallet();\n  const [onWalletConnectedOptions, setOnWalletConnectedOptions] =\n    useState<ConnectWalletOptions>();\n\n  const { wallet: multiWalletSolanaWallet } = useWallet<\n    SupportedChains.Solana,\n    WalletContextState,\n    never\n  >();\n\n  const solanaWallet = useMemo(() => {\n    if (\n      multiWalletSolanaWallet?.connected &&\n      multiWalletSolanaWallet.publicKey\n    ) {\n      setIsConnectionRequested(false);\n      return multiWalletSolanaWallet;\n    }\n    return undefined;\n  }, [multiWalletSolanaWallet]);\n\n  const evmWallet = useMemo(() => {\n    // the wallet client chain is set asynchronously, so wait until\n    // it's set before setting the wallet\n    if (walletClient && walletClient?.account && walletClient?.chain) {\n      // setIsConnecting(false);\n      setIsConnectionRequested(false);\n      return walletClient;\n    }\n    return undefined;\n  }, [walletClient]);\n\n  const did = useMemo(() => {\n    if (!connected) {\n      return undefined;\n    }\n    if (solanaWallet?.publicKey) {\n      return resolveQueryToDid(solanaWallet.publicKey.toBase58());\n    }\n    if (evmWallet?.account?.address) {\n      return resolveQueryToDid(evmWallet?.account?.address);\n    }\n    return undefined;\n  }, [solanaWallet, evmWallet, connected]);\n\n  const selectWalletRef = useRef<Promise<WalletReference>>();\n  const selectWalletRefResolve =\n    useRef<(value: WalletReference | PromiseLike<WalletReference>) => void>();\n  const selectWalletRefResolveReject = useRef<(reason?: Error) => void>();\n\n  const connectWallet = useCallback(\n    async (options?: ConnectWalletOptions) => {\n      setOnWalletConnectedOptions(options);\n      setIsConnecting(true);\n      evmDisconnect();\n      await solanaWallet?.disconnect().catch((error) => {\n        console.error(\"solana disconnect error\", error);\n      });\n      setIsConnectionRequested(true);\n      selectWalletRef.current = new Promise((resolve, reject) => {\n        selectWalletRefResolve.current = resolve;\n        selectWalletRefResolveReject.current = reject;\n      });\n      return selectWalletRef.current;\n    },\n    [evmDisconnect, solanaWallet]\n  );\n\n  const disconnectAll = useCallback(() => {\n    setIsConnecting(false);\n    setIsConnectionRequested(false);\n    disconnect?.();\n  }, [disconnect]);\n\n  useEffect(() => {\n    if (evmWallet) {\n      if (\n        onWalletConnectedOptions?.onWalletConnectedValidation &&\n        !onWalletConnectedOptions?.onWalletConnectedValidation(\n          evmWallet.account.address\n        )\n      ) {\n        setIsConnecting(false);\n        selectWalletRefResolveReject.current?.(\n          new Error(\"Invalid wallet\")\n        );\n        return;\n      }\n      setIsConnecting(false);\n      selectWalletRefResolve.current?.({\n        ...evmWallet,\n        address: evmWallet.account.address,\n      });\n      return;\n    }\n    if (solanaWallet && solanaWallet.publicKey?.toBase58()) {\n      if (\n        onWalletConnectedOptions?.onWalletConnectedValidation &&\n        !onWalletConnectedOptions?.onWalletConnectedValidation(\n          solanaWallet.publicKey?.toBase58()\n        )\n      ) {\n        setIsConnecting(false);\n        selectWalletRefResolveReject.current?.(\n          new Error(\n            \"Invalid wallet\",\n          )\n        );\n        return;\n      }\n      setIsConnecting(false);\n      selectWalletRefResolve.current?.({\n        ...solanaWallet,\n        address: solanaWallet.publicKey.toBase58(),\n      });\n    }\n  }, [evmWallet, onWalletConnectedOptions, solanaWallet]);\n  const chainKey = chain ? chain.toUpperCase() : undefined;\n  const chainValue = chainKey && Object.values(SupportedChains).includes(chainKey as any) ? SupportedChains[chainKey as keyof typeof SupportedChains] : undefined;\n  \n  const value = useMemo(\n    () => ({\n      did,\n      address: did ? did.split(\":\")?.at(-1) : undefined,\n      connected: !!(connected && did),\n      connectWallet,\n      solanaWallet,\n      evmWallet,\n      disconnect: disconnectAll,\n      chain: chain ? chainValue : undefined,\n      isConnecting,\n    }),\n    [\n      chainValue,\n      chain,\n      connected,\n      did,\n      disconnectAll,\n      evmWallet,\n      connectWallet,\n      solanaWallet,\n      isConnecting,\n    ]\n  );\n\n  const dialogShouldBeOpen = useMemo(() => {\n    return isConnectionRequested;\n  }, [isConnectionRequested]);\n\n  const onDialogClose = useCallback(() => {\n    setIsConnectionRequested(false);\n    selectWalletRefResolveReject.current?.(new Error(\"User closed modal\"));\n  }, []);\n\n  const onEvmClick = useCallback(() => {\n    setIsConnectionRequested(false);\n    openEvmModal?.();\n  }, [openEvmModal]);\n\n  const onSolanaClick = useCallback(() => {\n    setIsConnectionRequested(false);\n    openSolanaModal?.();\n  }, [openSolanaModal]);\n\n  return (\n    <MultiWalletContext.Provider value={value}>\n      <BaseDialog\n        isOpen={dialogShouldBeOpen}\n        onClose={onDialogClose}\n        withPadding={false}\n        contentClassName=\"max-w-md\"\n      >\n        <div className=\"p-8\">\n          <h4 className=\"profile-name-title my-5 text-center\">\n            Choose chain type\n          </h4>\n          <div>\n                <button onClick={() => onSolanaClick()}>Solana</button>\n                </div>\n           <div>\n                <button onClick={() => onEvmClick()}>Ethereum (EVM) Compatible</button> \n            </div>\n        </div>\n      </BaseDialog>\n      {children}\n    </MultiWalletContext.Provider>\n  );\n}\n\nexport const useMultiWallet = (): MultiWalletContextState =>\n  useContext(MultiWalletContext);\n","import { WalletClient } from \"wagmi\";\nimport { BrowserProvider, JsonRpcSigner } from \"ethers\";\n\n// eslint-disable-next-line import/prefer-default-export\nexport const walletClientToSigner = (\n  walletClient: WalletClient\n): JsonRpcSigner => {\n  const { account, chain, transport } = walletClient;\n  const network = {\n    chainId: chain?.id,\n    name: chain?.name,\n    ensAddress: chain?.contracts?.ensRegistry?.address,\n  };\n\n  const provider = new BrowserProvider(transport, network);\n  const signer = new JsonRpcSigner(provider, account?.address);\n  return signer;\n};\n","\nimport {\n    SignedProof,\n    CivicSignProveFactory,\n    CivicSignProve,\n    SolanaSignedProofOptions,\n  } from '@civic/civic-sign';\nimport axios from 'axios';\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useMultiWallet } from './MultiWalletProvider';\nimport { TypedDataDomain } from 'ethers';\nimport { walletClientToSigner } from './useAdapters';\nimport { toast } from 'react-hot-toast';\n\ntype Nonce = { nonce: string; timestamp: number };\n\nconst getNonce = async (civicPassApiStage: string = 'dev'): Promise<Nonce> => {\n    const response = await axios.get<Nonce>(`https://dev.api.civic.com/sign-${civicPassApiStage}/nonce`);\n    return response.data;\n};\n\nexport type Authentication = {\n  token: string;\n};\nexport type AuthenticateRequest = {\n  did: string;\n  address: string;\n  proof: SignedProof;\n  chain: 'solana' | 'ethereum' | 'casper';\n  nonceTimestamp: number;\n  network?: string;\n};\n\nconst callCivicSignBackend = async (request: AuthenticateRequest, civicPassApiStage: string = 'dev') => {\n  const url = `https://dev.api.civic.com/sign-${civicPassApiStage}/authenticate`;\n  const response = await axios.request<Authentication>({\n    method: 'POST',\n    url,\n    data: {\n      ...request,\n    },\n    //withCredentials: true\n  });\n  const { token } = response.data;\n  return token;\n}\n\ntype CivicSignAuthParams = {\n  children: JSX.Element;\n  stage?: string;\n};\ntype CivicSignAuthOutputProps = {\n  auth?: string;\n  proveOwnership?: () => Promise<void>;\n};\n\nexport const CivicSignAuthContext = createContext<CivicSignAuthOutputProps>(\n  {} as CivicSignAuthOutputProps\n);\nexport function CivicSignAuthProvider({ children, stage = 'dev' }: CivicSignAuthParams): JSX.Element {\n  const [auth, setAuth] = useState<string>();\n  const { solanaWallet, evmWallet, connected, address } = useMultiWallet();\n  const [civicSign, setCivicSign] = useState<CivicSignProve>();\n\n  useEffect(() => {\n    if (connected && solanaWallet && solanaWallet?.publicKey && solanaWallet?.signTransaction) {\n      const options: SolanaSignedProofOptions = {\n        cluster: 'mainnet-beta',\n        supportedClusterUrls: {\n          'mainnet-beta':\n            'https://twilight-small-flower.solana-mainnet.quiknode.pro/ec921b46257fea7637f4caed5780c80d49f4ab26/',\n        },\n        recentBlockCheck: false,\n        commitment: 'confirmed',\n        broadcastCheck: false,\n      };\n      console.log('useEffect wallet has changed, updating CivicSign proof', solanaWallet?.publicKey?.toBase58());\n      const civicSignInst = CivicSignProveFactory.createWithSolanaWallet(\n        {\n          publicKey: solanaWallet?.publicKey,\n          signTransaction: solanaWallet?.signTransaction,\n          signMessage: solanaWallet?.signMessage,\n        },\n        options\n      );\n      setCivicSign(civicSignInst);\n    } \n    else if (connected && evmWallet && address) {\n      const civicSignInst = CivicSignProveFactory.createWithEthereumWallet({\n        address,\n        signTypedData: (domain, types, value) =>\n          walletClientToSigner(evmWallet).signTypedData(\n            domain as TypedDataDomain,\n            types,\n            value\n          ),\n        verifierAddress: \"\",\n      });\n      setCivicSign(civicSignInst);\n    }\n    else {\n      setCivicSign(undefined);\n    }\n  }, [connected, solanaWallet?.publicKey, setCivicSign, solanaWallet, evmWallet, address]);\n  \n  const proveOwnership = useCallback(async () => {\n    if (connected && civicSign && address) {\n      const civicPassApiStage = stage === 'local' ? 'dev' : stage;\n      console.log('proveOwnership');\n      const doAuth = async (): Promise<void> => {\n        const did = await civicSign?.requestDid();\n        console.log('DID: ', did);\n        const civicSignNonce = await getNonce(civicPassApiStage);\n        const civicSignProof = await civicSign?.requestProof(civicSignNonce.nonce);\n        if (civicSignProof && did) {\n          console.log('powo proof', civicSignProof.proof);\n          // setPowoProof({ proof: civicSignProof?.proof, civicSignProof, did: did?.did });\n          const civicSignAuthToken = await callCivicSignBackend({\n            did: did?.did,\n            address,\n            proof: civicSignProof,\n            chain: did.did.includes('sol') ? 'solana' : 'ethereum',\n            nonceTimestamp: civicSignNonce.timestamp,\n          }, civicPassApiStage);\n          setAuth(civicSignAuthToken);\n        }\n      }\n      toast.promise(doAuth(), {\n        loading: 'Attempting to authenticate with civic-sign',\n        success: 'Successfully authenticated with civic-sign',\n        error: 'Error when fetching',\n      });\n    }\n  }, [connected, civicSign, address, stage]);\n\n  const value = useMemo(() => ({ proveOwnership, auth }), [proveOwnership, auth]);\n  return (\n    <CivicSignAuthContext.Provider\n      value={value}\n    >\n      {children}\n    </CivicSignAuthContext.Provider>\n  );\n}\nexport const useCivicSignAuth = (): CivicSignAuthOutputProps =>\n  useContext(CivicSignAuthContext);\n","export const IdentityStoreEndpoints = {\n    local: 'http://localhost:3000/local/v2',\n    dev: 'https://dev.api.civic.com/identity-store-dev/v2',\n    preprod: 'https://dev.api.civic.com/identity-store-preprod/v2',\n    prod: 'https://api.civic.com/identity-store/v2',\n  };\n","import { SetStateAction, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useMultiWallet } from \"./MultiWalletProvider\";\nimport { useCivicSignAuth } from \"./CivicSignAuth\";\nimport { ContentFormat, ContentItem, CreateStoreRequest, CredentialClient, CredentialSignerType, SparseCredential, StoreCredential } from \"@civic/credential-client\";\nimport { VerifiableCredential } from \"../types/credential\";\nimport { toast } from 'react-hot-toast';\nimport { IdentityStoreEndpoints } from \"./identityStore\";\nimport { set } from \"ramda\";\n\nexport const stages = ['local', 'dev', 'preprod', 'prod'];\nexport const Content: React.FC = () => {\n    const [credentialText, setCredentialText] = useState<string>(\"\");\n    const [retrievedCredential, setRetrievedCredential] = useState<StoreCredential>();\n    const [credentialId, setCredentialId] = useState<string>(\"\");\n    const [credentialType, setCredentialType] = useState<string>(\"\");\n    const { connectWallet, solanaWallet, evmWallet, connected, address, did, disconnect } = useMultiWallet();\n    const handleCredentialTextChange = (event: { target: { value: SetStateAction<string>; }; }) => {\n        setCredentialText(event.target.value);\n      };\n      const [stage, setStage] = useState<string>('dev');\n    const [identityStoreEndpoint, setIdentityStoreEndpoint] = useState<string>(IdentityStoreEndpoints[stage as keyof typeof IdentityStoreEndpoints]);\n    const { proveOwnership, auth } = useCivicSignAuth();\n    const [files, setFiles] = useState<File[]>([]); // State to hold the uploaded files\n    const [existingCredentials, setExistingCredentials] = useState<SparseCredential[]>([]); // State to hold the existing credentials\n    const [storeCredentialCount, setStoreCredentialCount] = useState<number>(0);\n    const [selectedCredentialFiles, setSelectedCredentialFiles] = useState<{ file: File, credential: VerifiableCredential }[]>([]);\n    const handleCredentialUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files) {\n            const credFiles = await Promise.all(Array.from(event.target.files).map(async (file) => {\n                const buffer = await file.arrayBuffer();\n                const credentialText = Buffer.from(buffer).toString('utf-8');\n                const credential = JSON.parse(credentialText) as VerifiableCredential;\n                return { file, credential };\n            }));\n            setSelectedCredentialFiles(credFiles);\n        }\n    };\n\n    const handleFileChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.files) {\n            const useFiles = [...Array.from(event.target.files), ...files];\n            setFiles(useFiles);\n        }\n    }, [files]);\n\n    useEffect(() => {\n        if (credentialText) {\n            const credential = JSON.parse(credentialText) as VerifiableCredential;\n            setCredentialId(credential.id);\n            setCredentialType(credential.identifier);\n        }\n        \n    }, [credentialText]);\n\n    const clientInst = useMemo(() => {\n        if (!did || !auth || !(solanaWallet || evmWallet)) return null;\n\n        return CredentialClient.create(did, {\n            identityStoreEndpoint,\n            auth,\n            signer: {\n                type: CredentialSignerType.WALLET,\n                signMessage: async (message: Uint8Array) => {\n                    if (solanaWallet) {\n                        const response = await solanaWallet?.signMessage?.(message);\n                        if (!response) {\n                            throw new Error('No response from signMessage');\n                        }\n                        return response;\n                    }\n                    if (evmWallet) {\n                        const response = await evmWallet?.signMessage?.({ message: { raw: message } });\n                        if (!response) {\n                            throw new Error('No response from signMessage');\n                        }\n                        return new Uint8Array(Buffer.from(response));\n                    }\n                    throw new Error('No wallet found');\n                },\n            }\n        });\n    }, [did, auth, solanaWallet, evmWallet, identityStoreEndpoint]);\n\n    useEffect(() => {\n        if (clientInst) {\n            toast.loading(`Discovering all existing credentials for ${clientInst.did}`);\n            clientInst.find([]).then((credentials: SparseCredential[]) => {\n                setExistingCredentials(credentials);\n                toast.dismiss();\n                return toast.success(`${credentials.length} Existing credentials found`);\n            })\n        }\n    }, [clientInst, storeCredentialCount]);\n\n    const retrieveCredential = useCallback(async (inCredentialId?: string) => {\n        const useCredentialId = inCredentialId || credentialId;\n        console.log('useCredentialId', useCredentialId);\n        if (clientInst && useCredentialId) {\n            toast.loading(`Attempting to retrieve credential ${useCredentialId}`);\n            await clientInst.get(useCredentialId).then((credential: StoreCredential | null) => {\n                toast.dismiss();\n                if (credential) {\n                    setRetrievedCredential(credential as StoreCredential);\n                    return toast.success(`Retrieved ${credential.credentialId} successfully`);\n                }\n                return toast.error(`Couldn't retrieve credential`);\n            });\n        }\n    }, [clientInst, credentialId]);\n\n    const credentialRequestItem = useCallback(async (credential: VerifiableCredential, evidenceFiles: File[]): Promise<CreateStoreRequest> => {\n        // store credential as content\n        const content = [{\n            name: credential.identifier,\n            mimeType: 'application/json',\n            format: 'JWE' as ContentFormat,\n            blob: Buffer.from(JSON.stringify(credential))\n        }];\n        const evidenceContentFromFile = async (file: File): Promise<ContentItem> => {\n            const arrayBuffer = await file.arrayBuffer();\n            const buffer = new Uint8Array(arrayBuffer);\n            const blob = new Uint8Array(Buffer.from(buffer));\n            const name = file.name;\n            const type = file.type;\n            console.log('evidenceContentFromFile buffer', { buffer, blob, name, type });\n            const sha256 = await crypto.subtle.digest('SHA-256', buffer).then((hash) => Buffer.from(hash).toString('hex'));\n            console.log('evidenceContentFromFile buffer', { buffer, sha256 });\n            return {\n                sha256,\n                name: file.name,\n                mimeType: file.type,\n                format: 'JWE' as ContentFormat,\n                blob,\n            };\n        }\n        // store evidence\n        const evidence: ContentItem[] = evidenceFiles.length > 0 ? await Promise.all(evidenceFiles.map(evidenceContentFromFile)) : [];\n        const allContent = [...content, ...evidence];\n        const metadata = {\n            issuanceDate: credential.issuanceDate,\n        }\n        return { metadata, credentialId: credential.id, tags: [credential.identifier, ...allContent.map(({ name }) => name)], content: allContent as ContentItem[] };\n    }, []);\n\n    const storeCredential = useCallback(async () => {\n        if (clientInst && selectedCredentialFiles.length > 0) {\n            const ids = selectedCredentialFiles.map(({ credential }) => credential.id);\n            console.log('store', ids);\n            const requests = await Promise.all(selectedCredentialFiles.map(({ credential }) => {\n                if (credential.identifier === 'credential-cvc:IdDocument-v3') {\n                    return credentialRequestItem(credential, files);\n                }\n                return credentialRequestItem(credential, []);\n            }));\n            \n            await toast.promise(\n                clientInst.store(requests)\n                .then(() => {\n                    const newCount = storeCredentialCount + 1;\n                    setStoreCredentialCount(newCount);\n                }), {\n                loading: `Attempting to store ${ids}`,\n                success: `Successfully stored ${ids}`,\n                error: 'Error when fetching',\n              });\n        }\n    }, [clientInst, credentialRequestItem, files, selectedCredentialFiles, storeCredentialCount]);\n\n    const deleteCredential = useCallback(async (credId: string) => {\n        if (clientInst) {\n            await toast.promise(\n                clientInst.delete(credId)\n                .then(() => {\n                    const newCount = storeCredentialCount + 1;\n                    setStoreCredentialCount(newCount);\n                }), {\n                loading: `Attempting to delete ${credId}`,\n                success: `Successfully deleted ${credId}`,\n                error: 'Error when deleting',\n              });\n        }\n        \n    }, [clientInst, storeCredentialCount]);\n    return (\n        <>  \n            <div>\n                <span>Stage:</span>\n                  {stages.map((useStage) => {\n                    return (\n                      <span key={`stage_${useStage}`}>\n                        <input\n                          type=\"radio\"\n                          data-testid={`TESTID_STAGE_${useStage}`}\n                          value={useStage}\n                          name=\"stage\"\n                          checked={stage === useStage}\n                          onChange={(event) => {\n                            setIdentityStoreEndpoint(IdentityStoreEndpoints[event.target.value as keyof typeof IdentityStoreEndpoints]);\n                            setStage(event.target.value)\n                          }}\n                        />\n                        {useStage}\n                      </span>\n                    );\n                  })}\n                <br />\n                <br />\n                <div>\n                    Identity Store endpoint:\n                    <input type=\"text\" onChange={(event) => setIdentityStoreEndpoint(event.target.value)} value={identityStoreEndpoint} className=\"resize rounded-md w-full\" />\n                </div>\n            </div>\n            <br />\n            <br />\n            {!connected && (\n                <div className=\"relative w-[32rem]\">\n                    <div className=\"text-xl font-bold\">MultiChain Connect</div>\n                    <button onClick={() => connectWallet()} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n                        Connect wallet\n                    </button>\n                </div>\n            )}\n            {connected && (\n                <div>\n                    <div className=\"text-xl font-bold\">Wallet Connected</div>\n                    <div>\n                        <div>Address: {address}</div>\n                        <div>DID: {did}</div>\n                    </div>\n                    <div className=\"flex justify-start\">\n                        <button onClick={() => proveOwnership?.()} className=\"bg-blue-500 hover:bg-grey-700 text-white font-bold py-2 px-4 rounded\">\n                            Authenticate with Civic-sign-backend\n                        </button>\n                    </div>\n                    <div className=\"flex justify-end\">\n                        <button onClick={() => disconnect?.()} className=\"bg-red-500 hover:bg-grey-700 text-white font-bold py-2 px-4 rounded\">\n                            Disconnect wallet\n                        </button>\n                    </div>\n                </div>\n            )}\n            {auth && (\n                <>\n                    {/* <div>\n                        Civic Sign Auth\n                        <textarea readOnly value={auth} className=\"resize rounded-md w-full\" rows={10}></textarea>\n                    </div> */}\n                    \n                    <div>\n                        <h3>Existing credentials</h3>\n                        <ul className=\"list-disc list-inside\">\n                        {existingCredentials && existingCredentials?.map((c: SparseCredential) => (\n                            <li key={c.credentialId}>\n                                <a onClick={() => retrieveCredential(c.credentialId)} className=\"text-blue-500 underline cursor-pointer\">\n                                    {c.credentialId}\n                                </a>\n                                &nbsp;\n                                <span>Tags: [{c.tags.join(', ')}]</span>\n\n                                <button\n                                    type=\"button\"\n                                    onClick={() => deleteCredential(c.credentialId)}\n                                    className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\n                                    >\n                                    Delete\n                                </button>\n                            </li>\n                        ))}\n                        </ul>\n                    </div>\n                    <div>\n                        <h2>Upload Credential File(s)</h2>\n                        <input type=\"file\" multiple onChange={handleCredentialUpload} className=\"mb-4\" />\n                        {selectedCredentialFiles && selectedCredentialFiles.length > 0 && (\n                            <ul className=\"list-disc list-inside\">\n                            {selectedCredentialFiles.map(({ file, credential }, index) => (\n                                <li key={index}>\n                                    {credential.id}, {credential.identifier}, {file.name}\n                                </li>\n                            ))}\n                            </ul>\n                        )}\n                    </div>\n                    <br />\n                    <div className=\"relative w-[32rem]\">\n                        <div>\n                            <h2>Upload IDDocument Evidence Files</h2>\n                            <input type=\"file\" multiple onChange={handleFileChange} className=\"mb-4\" />\n                            {files.map((file, index) => (\n                                <div key={index}>{file.name}</div>\n                            ))}\n                        </div>\n                        <div className=\"flex w-full justify-between py-1.5\">\n                            <div className=\"flex gap-2\">\n                                {selectedCredentialFiles.length > 0 && (\n                                    <>\n                                        <button onClick={storeCredential} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n                                            Store Credential\n                                        </button>\n                                    </>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                    {credentialId && (\n                        <div className=\"relative w-[32rem]\">\n                            <div>\n                                Retrieve credential\n                            </div>\n                            <input type=\"text\" value={credentialId} disabled={true} className=\"resize rounded-md w-full\" />\n                            <button onClick={() => retrieveCredential()} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n                                Retrieve Credential\n                            </button>\n                            \n                        </div>\n                    )}\n                    {retrievedCredential && (\n                        <div>\n                            <h4>Retrieved credential:</h4>\n                            <div>tags: [{retrievedCredential?.tags}]</div>\n                            <div>content:</div>\n                            <ul className=\"list-disc list-inside\">\n                                {retrievedCredential?.content?.map((c: ContentItem) => (\n                                    <li key={c.name}>\n                                        <a href={URL.createObjectURL(new Blob([c.mimeType === 'application/json' ? Buffer.from(c.blob).toString() : c.blob], { type: c.mimeType }))} download={c.name} className=\"text-blue-500 underline\">\n                                            {c.name} ({c.mimeType})\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n\n                            <form action={`/interaction/${address}/login`} method=\"post\">\n                                <input required type=\"hidden\" name=\"credential\" value={Buffer.from(retrievedCredential?.content?.at(0)?.blob as Uint8Array).toString()}></input>\n\n                                <button type=\"submit\">Sign-in</button>\n                            </form>\n                        </div>\n                    )}\n                </>\n            )}\n        </>\n    );\n  }\n","\"use client\"; // This is a client component\nimport {\n  MultichainWalletProvider,\n  LabelEntry,\n} from \"@civic/multichain-connect-react-core\";\nimport { SolanaWalletAdapterConfig } from \"@civic/multichain-connect-react-solana-wallet-adapter\";\nimport { RainbowkitConfig } from \"@civic/multichain-connect-react-rainbowkit-wallet-adapter\";\nimport {\n  LedgerWalletAdapter,\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n  TorusWalletAdapter,\n  WalletConnectWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { useMemo } from \"react\";\nimport { evmChains, evmTestChains, solanaChains, solanaTestChains } from \"./chains\";\nimport MultiWalletProvider, { useMultiWallet } from \"./MultiWalletProvider\";\nimport { publicProvider } from 'wagmi/providers/public';\nimport { Content } from \"./Content\";\nimport { CivicSignAuthProvider } from \"./CivicSignAuth\";\n\nexport default function Home() {\n  const solanaAdapters = useMemo(\n    () => [\n      new PhantomWalletAdapter(), // re-adding this as Phantom is not showing on mobile browsers\n      new SolflareWalletAdapter(), // TODO CPASS-1585, don't include Solflare for Android only\n      new LedgerWalletAdapter(),\n      new WalletConnectWalletAdapter({\n        options: { projectId: process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID },\n        network:\n          solanaChains.length > 0\n            ? WalletAdapterNetwork.Mainnet\n            : WalletAdapterNetwork.Devnet,\n      }),\n      new TorusWalletAdapter(),\n    ],\n    []\n  );\n  \n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <MultichainWalletProvider\n        labels={{\n          [LabelEntry.CONNECT]: \"Connect\",\n          [LabelEntry.CONNECTED]: \"Connected\",\n          [LabelEntry.DISCONNECT]: \"Disconnect\",\n          [LabelEntry.DISCONNECTED]: \"Disconnected\",\n          [LabelEntry.SELECT_CHAIN]: \"Choose wallet type\",\n          [LabelEntry.OTHER]: \"Other\",\n        }}\n      >\n        <RainbowkitConfig\n          chains={evmChains}\n          testnetChains={evmTestChains}\n          providers={[publicProvider()]}\n          options={{\n            appName: \"Civic.me\",\n            // Rainbowkit relies on WalletConnect which now needs to obtain a projectId from WalletConnect Cloud.\n            walletConnectProjectId: `${process.env.NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID}`,\n          }}\n        >\n          <SolanaWalletAdapterConfig\n            adapters={solanaAdapters}\n            chains={solanaChains}\n            testnetChains={solanaTestChains}\n          >\n            <MultiWalletProvider>\n              <CivicSignAuthProvider>\n                <Content />\n              </CivicSignAuthProvider>\n            </MultiWalletProvider>\n          </SolanaWalletAdapterConfig>\n        </RainbowkitConfig>\n      </MultichainWalletProvider> \n    </main>\n  );\n}\n"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","code","ids","id","keys","Object","module","exports","bind","lexi_1","require","IdentityStoreClient_1","types_1","R","__importStar","constants_1","CredentialClient","create","did","options","store","request","_a","signer","type","CredentialSignerType","WALLET","lexi","newLexi","all","makeLexiStorageRequest","makeUnencryptedStorageRequest","blobs","content","c","Buffer","from","blob","toString","storeCredentialRequest","createStoreCredentialRequest","omit","storedCredentialsResponse","identityStoreClient","storeCredential","contentWithBlobs","index","assign","stringBlob","uploadBlobsToStorage","credentialId","encryptedBlobsAsJWEs","encryptBlobsAsJWEs","encryptedContentArray","createEncryptedContentArray","encBlob","payload","ciphertext","__awaiter","encryptForMe","contentItem","ciphertextOmitted","encryptionMetadata","JSON","stringify","contentArray","tags","Set","name","metadata","storageProvider","DEFAULT_STORAGE_PROVIDER","storeDataToStorage","find","findCredentials","get","retrievedCredential","getCredential","decryptedContentArray","decryptContentArray","retrieveContentArray","format","ref","parse","getDataFromStorage","encryptionPackage","decryptedBlob","decrypt","downloadedContent","delete","deleteCredential","LexiWallet","publicSigningString","constructor","salt","crypto","getRandomValues","Uint8Array","default","auth","identityStoreEndpoint","axios_1","__importDefault","version_1","crypto_1","IdentityStoreClient","evidenceAxiosInstance","_evidenceAxiosInstance","response","axiosInstance","concat","data","params","validateStatus","status","credential","post","presignedUrl","responseType","binaryBlob","put","headers","hash","createHash","update","digest","patch","endpoint","DEFAULT_IDENTITY_STORE_ENDPOINT","baseURL","VERSION","Authorization","CredentialClient_1","enumerable","__exportStar","evmChains","mainnet","arbitrum","polygon","xdc","fantom","polygonZkEvm","avalanche","base","optimism","evmTestChains","sepolia","goerli","arbitrumSepolia","polygonMumbai","xdcTestnet","fantomTestnet","polygonZkEvmTestnet","avalancheFuji","baseSepolia","optimismSepolia","solanaChains","rpcEndpoint","process","solanaTestChains","resolveQueryToDid","query","match","getAddress","isSolanaAddress","address","PublicKey","error","defaultOnClose","BaseDialog","param","isOpen","onClose","title","contentClassName","withPadding","children","withOverlay","jsx_runtime","jsx","Transition","appear","show","as","Fragment","Dialog","jsxs","Panel","className","Title","div","style","backdropFilter","borderRadius","button","onClick","svg","fill","viewBox","xmlns","path","fillRule","d","clipRule","defaultProps","undefined","MultiWalletContext","React","MultiWalletProvider","isConnectionRequested","setIsConnectionRequested","isConnecting","setIsConnecting","openConnectModal","openEvmModal","useRainbowkitAdapterModal","openSolanaModal","useSolanaWalletAdapterModal","walletClient","useWalletClient","disconnect","evmDisconnect","useDisconnect","connected","chain","useWallet","onWalletConnectedOptions","setOnWalletConnectedOptions","useState","wallet","multiWalletSolanaWallet","solanaWallet","useMemo","publicKey","evmWallet","account","toBase58","selectWalletRef","useRef","selectWalletRefResolve","selectWalletRefResolveReject","connectWallet","useCallback","catch","console","current","reject","disconnectAll","useEffect","onWalletConnectedValidation","chainKey","toUpperCase","chainValue","values","SupportedChains","includes","value","split","at","dialogShouldBeOpen","onDialogClose","onEvmClick","onSolanaClick","Provider","h4","useMultiWallet","useContext","walletClientToSigner","transport","network","chainId","ensAddress","contracts","ensRegistry","provider","BrowserProvider","JsonRpcSigner","getNonce","civicPassApiStage","axios","callCivicSignBackend","token","method","url","CivicSignAuthContext","createContext","CivicSignAuthProvider","stage","setAuth","civicSign","setCivicSign","signTransaction","log","CivicSignProveFactory","createWithSolanaWallet","signMessage","cluster","supportedClusterUrls","recentBlockCheck","commitment","broadcastCheck","createWithEthereumWallet","signTypedData","domain","types","verifierAddress","proveOwnership","doAuth","requestDid","civicSignNonce","civicSignProof","requestProof","nonce","proof","nonceTimestamp","timestamp","toast","promise","loading","success","useCivicSignAuth","IdentityStoreEndpoints","local","dev","preprod","prod","stages","Content","credentialText","setCredentialText","setRetrievedCredential","setCredentialId","credentialType","setCredentialType","setStage","setIdentityStoreEndpoint","files","setFiles","existingCredentials","setExistingCredentials","storeCredentialCount","setStoreCredentialCount","selectedCredentialFiles","setSelectedCredentialFiles","handleCredentialUpload","event","target","Array","file","buffer","arrayBuffer","handleFileChange","identifier","clientInst","message","raw","credentials","dismiss","length","retrieveCredential","inCredentialId","useCredentialId","credentialRequestItem","evidenceFiles","mimeType","evidenceContentFromFile","sha256","subtle","allContent","issuanceDate","requests","credId","span","input","data-testid","useStage","checked","onChange","br","h3","ul","li","a","join","h2","multiple","disabled","href","URL","createObjectURL","Blob","download","form","action","required","Home","solanaAdapters","PhantomWalletAdapter","SolflareWalletAdapter","LedgerWalletAdapter","WalletConnectWalletAdapter","projectId","WalletAdapterNetwork","Mainnet","Devnet","TorusWalletAdapter","main","MultichainWalletProvider","labels","LabelEntry","CONNECT","CONNECTED","DISCONNECT","DISCONNECTED","SELECT_CHAIN","OTHER","RainbowkitConfig","chains","testnetChains","providers","publicProvider","appName","walletConnectProjectId","SolanaWalletAdapterConfig","adapters"],"sourceRoot":""}