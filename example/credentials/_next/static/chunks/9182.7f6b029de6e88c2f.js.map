{"version":3,"file":"static/chunks/9182.7f6b029de6e88c2f.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/@ledgerhq/devices/lib/hid-framing.js","webpack://_N_E/../../node_modules/@ledgerhq/logs/lib-es/index.js","webpack://_N_E/../../node_modules/@ledgerhq/hw-transport-webhid/node_modules/@ledgerhq/hw-transport/lib-es/Transport.js","webpack://_N_E/../../node_modules/@ledgerhq/devices/lib-es/index.js","webpack://_N_E/../../node_modules/@ledgerhq/hw-transport-webhid/lib-es/TransportWebHID.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar errors_1 = require(\"@ledgerhq/errors\");\nvar Tag = 0x05;\nfunction asUInt16BE(value) {\n    var b = Buffer.alloc(2);\n    b.writeUInt16BE(value, 0);\n    return b;\n}\nvar initialAcc = {\n    data: Buffer.alloc(0),\n    dataLength: 0,\n    sequence: 0\n};\n/**\n *\n */\nvar createHIDframing = function (channel, packetSize) {\n    return {\n        makeBlocks: function (apdu) {\n            var data = Buffer.concat([asUInt16BE(apdu.length), apdu]);\n            var blockSize = packetSize - 5;\n            var nbBlocks = Math.ceil(data.length / blockSize);\n            data = Buffer.concat([\n                data,\n                Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0),\n            ]);\n            var blocks = [];\n            for (var i = 0; i < nbBlocks; i++) {\n                var head = Buffer.alloc(5);\n                head.writeUInt16BE(channel, 0);\n                head.writeUInt8(Tag, 2);\n                head.writeUInt16BE(i, 3);\n                var chunk = data.slice(i * blockSize, (i + 1) * blockSize);\n                blocks.push(Buffer.concat([head, chunk]));\n            }\n            return blocks;\n        },\n        reduceResponse: function (acc, chunk) {\n            var _a = acc || initialAcc, data = _a.data, dataLength = _a.dataLength, sequence = _a.sequence;\n            if (chunk.readUInt16BE(0) !== channel) {\n                throw new errors_1.TransportError(\"Invalid channel\", \"InvalidChannel\");\n            }\n            if (chunk.readUInt8(2) !== Tag) {\n                throw new errors_1.TransportError(\"Invalid tag\", \"InvalidTag\");\n            }\n            if (chunk.readUInt16BE(3) !== sequence) {\n                throw new errors_1.TransportError(\"Invalid sequence\", \"InvalidSequence\");\n            }\n            if (!acc) {\n                dataLength = chunk.readUInt16BE(5);\n            }\n            sequence++;\n            var chunkData = chunk.slice(acc ? 5 : 7);\n            data = Buffer.concat([data, chunkData]);\n            if (data.length > dataLength) {\n                data = data.slice(0, dataLength);\n            }\n            return {\n                data: data,\n                dataLength: dataLength,\n                sequence: sequence\n            };\n        },\n        getReducedResult: function (acc) {\n            if (acc && acc.dataLength === acc.data.length) {\n                return acc.data;\n            }\n        }\n    };\n};\nexports[\"default\"] = createHIDframing;\n//# sourceMappingURL=hid-framing.js.map","let id = 0;\nconst subscribers = [];\n/**\n * Logs something\n *\n * @param type a namespaced identifier of the log (it is not a level like \"debug\", \"error\" but more like \"apdu-in\", \"apdu-out\", etc...)\n * @param message a clear message of the log associated to the type\n */\nexport const log = (type, message, data) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    dispatch(obj);\n};\n/**\n * A simple tracer function, only expanding the existing log function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param context Anything representing the context where the log occurred\n */\nexport const trace = ({ type, message, data, context, }) => {\n    const obj = {\n        type,\n        id: String(++id),\n        date: new Date(),\n    };\n    if (message)\n        obj.message = message;\n    if (data)\n        obj.data = data;\n    if (context)\n        obj.context = context;\n    dispatch(obj);\n};\n/**\n * A simple tracer class, that can be used to avoid repetition when using the `trace` function\n *\n * Its goal is to capture more context than a log function.\n * This is simple for now, but can be improved later.\n *\n * @param type A given type (not level) for the current local tracer (\"hw\", \"withDevice\", etc.)\n * @param context Anything representing the context where the log occurred\n */\nexport class LocalTracer {\n    constructor(type, context) {\n        this.type = type;\n        this.context = context;\n    }\n    trace(message, data) {\n        trace({\n            type: this.type,\n            message,\n            data,\n            context: this.context,\n        });\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n    }\n    updateContext(contextToAdd) {\n        this.context = Object.assign(Object.assign({}, this.context), contextToAdd);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = type;\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `type`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withType(type) {\n        return new LocalTracer(type, this.context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with a new `context`\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */\n    withContext(context) {\n        return new LocalTracer(this.type, context);\n    }\n    /**\n     * Create a new instance of the LocalTracer with an updated `context`,\n     * on which an additional context is merged with the existing one.\n     *\n     * It does not mutate the calling instance, but returns a new LocalTracer,\n     * following a simple builder pattern.\n     */\n    withUpdatedContext(contextToAdd) {\n        return new LocalTracer(this.type, Object.assign(Object.assign({}, this.context), contextToAdd));\n    }\n}\n/**\n * Adds a subscribers to the emitted logs.\n *\n * @param cb that is called for each future log() with the Log object\n * @return a function that can be called to unsubscribe the listener\n */\nexport const listen = (cb) => {\n    subscribers.push(cb);\n    return () => {\n        const i = subscribers.indexOf(cb);\n        if (i !== -1) {\n            // equivalent of subscribers.splice(i, 1) // https://twitter.com/Rich_Harris/status/1125850391155965952\n            subscribers[i] = subscribers[subscribers.length - 1];\n            subscribers.pop();\n        }\n    };\n};\nfunction dispatch(log) {\n    for (let i = 0; i < subscribers.length; i++) {\n        try {\n            subscribers[i](log);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nif (typeof window !== \"undefined\") {\n    window.__ledgerLogsListen = listen;\n}\n//# sourceMappingURL=index.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport EventEmitter from \"events\";\nimport { TransportRaceCondition, TransportError, StatusCodes, getAltStatusMessage, TransportStatusError, } from \"@ledgerhq/errors\";\nimport { LocalTracer } from \"@ledgerhq/logs\";\nexport { TransportError, TransportStatusError, StatusCodes, getAltStatusMessage };\nconst DEFAULT_LOG_TYPE = \"transport\";\n/**\n * The Transport class defines a generic interface for communicating with a Ledger hardware wallet.\n * There are different kind of transports based on the technology (channels like U2F, HID, Bluetooth, Webusb) and environment (Node, Web,...).\n * It is an abstract class that needs to be implemented.\n */\nclass Transport {\n    constructor({ context, logType } = {}) {\n        this.exchangeTimeout = 30000;\n        this.unresponsiveTimeout = 15000;\n        this.deviceModel = null;\n        this._events = new EventEmitter();\n        /**\n         * Send data to the device using the higher level API.\n         *\n         * @param {number} cla - The instruction class for the command.\n         * @param {number} ins - The instruction code for the command.\n         * @param {number} p1 - The first parameter for the instruction.\n         * @param {number} p2 - The second parameter for the instruction.\n         * @param {Buffer} data - The data to be sent. Defaults to an empty buffer.\n         * @param {Array<number>} statusList - A list of acceptable status codes for the response. Defaults to [StatusCodes.OK].\n         * @param {Object} options - Contains optional options for the exchange function\n         *  - abortTimeoutMs: stop the send after a given timeout. Another timeout exists\n         *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.\n         * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.\n         */\n        this.send = (cla_1, ins_1, p1_1, p2_1, ...args_1) => __awaiter(this, [cla_1, ins_1, p1_1, p2_1, ...args_1], void 0, function* (cla, ins, p1, p2, data = Buffer.alloc(0), statusList = [StatusCodes.OK], { abortTimeoutMs } = {}) {\n            const tracer = this.tracer.withUpdatedContext({ function: \"send\" });\n            if (data.length >= 256) {\n                tracer.trace(\"data.length exceeded 256 bytes limit\", { dataLength: data.length });\n                throw new TransportError(\"data.length exceed 256 bytes limit. Got: \" + data.length, \"DataLengthTooBig\");\n            }\n            tracer.trace(\"Starting an exchange\", { abortTimeoutMs });\n            const response = yield this.exchange(\n            // The size of the data is added in 1 byte just before `data`\n            Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]), { abortTimeoutMs });\n            tracer.trace(\"Received response from exchange\");\n            const sw = response.readUInt16BE(response.length - 2);\n            if (!statusList.some(s => s === sw)) {\n                throw new TransportStatusError(sw);\n            }\n            return response;\n        });\n        this._appAPIlock = null;\n        this.tracer = new LocalTracer(logType !== null && logType !== void 0 ? logType : DEFAULT_LOG_TYPE, context);\n    }\n    /**\n     * Send data to the device using a low level API.\n     * It's recommended to use the \"send\" method for a higher level API.\n     * @param {Buffer} apdu - The data to send.\n     * @param {Object} options - Contains optional options for the exchange function\n     *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists\n     *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.\n     * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.\n     */\n    exchange(_apdu, { abortTimeoutMs: _abortTimeoutMs } = {}) {\n        throw new Error(\"exchange not implemented\");\n    }\n    /**\n     * Send apdus in batch to the device using a low level API.\n     * The default implementation is to call exchange for each apdu.\n     * @param {Array<Buffer>} apdus - array of apdus to send.\n     * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.\n     * @returns {Subscription} A Subscription object on which you can call \".unsubscribe()\" to stop sending apdus.\n     */\n    exchangeBulk(apdus, observer) {\n        let unsubscribed = false;\n        const unsubscribe = () => {\n            unsubscribed = true;\n        };\n        const main = () => __awaiter(this, void 0, void 0, function* () {\n            if (unsubscribed)\n                return;\n            for (const apdu of apdus) {\n                const r = yield this.exchange(apdu);\n                if (unsubscribed)\n                    return;\n                const status = r.readUInt16BE(r.length - 2);\n                if (status !== StatusCodes.OK) {\n                    throw new TransportStatusError(status);\n                }\n                observer.next(r);\n            }\n        });\n        main().then(() => !unsubscribed && observer.complete(), e => !unsubscribed && observer.error(e));\n        return { unsubscribe };\n    }\n    /**\n     * Set the \"scramble key\" for the next data exchanges with the device.\n     * Each app can have a different scramble key and it is set internally during instantiation.\n     * @param {string} key - The scramble key to set.\n     * deprecated This method is no longer needed for modern transports and should be migrated away from.\n     * no @ before deprecated as it breaks documentationjs on version 14.0.2\n     * https://github.com/documentationjs/documentation/issues/1596\n     */\n    setScrambleKey(_key) { }\n    /**\n     * Close the connection with the device.\n     *\n     * Note: for certain transports (hw-transport-node-hid-singleton for ex), once the promise resolved,\n     * the transport instance is actually still cached, and the device is disconnected only after a defined timeout.\n     * But for the consumer of the Transport, this does not matter and it can consider the transport to be closed.\n     *\n     * @returns {Promise<void>} A promise that resolves when the transport is closed.\n     */\n    close() {\n        return Promise.resolve();\n    }\n    /**\n     * Listen for an event on the transport instance.\n     * Transport implementations may have specific events. Common events include:\n     * \"disconnect\" : triggered when the transport is disconnected.\n     * @param {string} eventName - The name of the event to listen for.\n     * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.\n     */\n    on(eventName, cb) {\n        this._events.on(eventName, cb);\n    }\n    /**\n     * Stop listening to an event on an instance of transport.\n     */\n    off(eventName, cb) {\n        this._events.removeListener(eventName, cb);\n    }\n    emit(event, ...args) {\n        this._events.emit(event, ...args);\n    }\n    /**\n     * Enable or not logs of the binary exchange\n     */\n    setDebugMode() {\n        console.warn(\"setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.\");\n    }\n    /**\n     * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)\n     */\n    setExchangeTimeout(exchangeTimeout) {\n        this.exchangeTimeout = exchangeTimeout;\n    }\n    /**\n     * Define the delay before emitting \"unresponsive\" on an exchange that does not respond\n     */\n    setExchangeUnresponsiveTimeout(unresponsiveTimeout) {\n        this.unresponsiveTimeout = unresponsiveTimeout;\n    }\n    /**\n     * create() allows to open the first descriptor available or\n     * throw if there is none or if timeout is reached.\n     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)\n     * @example\n    TransportFoo.create().then(transport => ...)\n     */\n    static create(openTimeout = 3000, listenTimeout) {\n        return new Promise((resolve, reject) => {\n            let found = false;\n            const sub = this.listen({\n                next: e => {\n                    found = true;\n                    if (sub)\n                        sub.unsubscribe();\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    this.open(e.descriptor, openTimeout).then(resolve, reject);\n                },\n                error: e => {\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    reject(e);\n                },\n                complete: () => {\n                    if (listenTimeoutId)\n                        clearTimeout(listenTimeoutId);\n                    if (!found) {\n                        reject(new TransportError(this.ErrorMessage_NoDeviceFound, \"NoDeviceFound\"));\n                    }\n                },\n            });\n            const listenTimeoutId = listenTimeout\n                ? setTimeout(() => {\n                    sub.unsubscribe();\n                    reject(new TransportError(this.ErrorMessage_ListenTimeout, \"ListenTimeout\"));\n                }, listenTimeout)\n                : null;\n        });\n    }\n    /**\n     * Wrapper to make an exchange \"atomic\" (blocking any other exchange)\n     *\n     * It also handles \"unresponsiveness\" by emitting \"unresponsive\" and \"responsive\" events.\n     *\n     * @param f The exchange job, using the transport to run\n     * @returns a Promise resolving with the output of the given job\n     */\n    exchangeAtomicImpl(f) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tracer = this.tracer.withUpdatedContext({\n                function: \"exchangeAtomicImpl\",\n                unresponsiveTimeout: this.unresponsiveTimeout,\n            });\n            if (this.exchangeBusyPromise) {\n                tracer.trace(\"Atomic exchange is already busy\");\n                throw new TransportRaceCondition(\"An action was already pending on the Ledger device. Please deny or reconnect.\");\n            }\n            // Sets the atomic guard\n            let resolveBusy;\n            const busyPromise = new Promise(r => {\n                resolveBusy = r;\n            });\n            this.exchangeBusyPromise = busyPromise;\n            // The device unresponsiveness handler\n            let unresponsiveReached = false;\n            const timeout = setTimeout(() => {\n                tracer.trace(`Timeout reached, emitting Transport event \"unresponsive\"`, {\n                    unresponsiveTimeout: this.unresponsiveTimeout,\n                });\n                unresponsiveReached = true;\n                this.emit(\"unresponsive\");\n            }, this.unresponsiveTimeout);\n            try {\n                const res = yield f();\n                if (unresponsiveReached) {\n                    tracer.trace(\"Device was unresponsive, emitting responsive\");\n                    this.emit(\"responsive\");\n                }\n                return res;\n            }\n            finally {\n                tracer.trace(\"Finalize, clearing busy guard\");\n                clearTimeout(timeout);\n                if (resolveBusy)\n                    resolveBusy();\n                this.exchangeBusyPromise = null;\n            }\n        });\n    }\n    decorateAppAPIMethods(self, methods, scrambleKey) {\n        for (const methodName of methods) {\n            self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);\n        }\n    }\n    decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {\n        return (...args) => __awaiter(this, void 0, void 0, function* () {\n            const { _appAPIlock } = this;\n            if (_appAPIlock) {\n                return Promise.reject(new TransportError(\"Ledger Device is busy (lock \" + _appAPIlock + \")\", \"TransportLocked\"));\n            }\n            try {\n                this._appAPIlock = methodName;\n                this.setScrambleKey(scrambleKey);\n                return yield f.apply(ctx, args);\n            }\n            finally {\n                this._appAPIlock = null;\n            }\n        });\n    }\n    /**\n     * Sets the context used by the logging/tracing mechanism\n     *\n     * Useful when re-using (cached) the same Transport instance,\n     * but with a new tracing context.\n     *\n     * @param context A TraceContext, that can undefined to reset the context\n     */\n    setTraceContext(context) {\n        this.tracer = this.tracer.withContext(context);\n    }\n    /**\n     * Updates the context used by the logging/tracing mechanism\n     *\n     * The update only overrides the key-value that are already defined in the current context.\n     *\n     * @param contextToAdd A TraceContext that will be added to the current context\n     */\n    updateTraceContext(contextToAdd) {\n        this.tracer.updateContext(contextToAdd);\n    }\n    /**\n     * Gets the tracing context of the transport instance\n     */\n    getTraceContext() {\n        return this.tracer.getContext();\n    }\n}\nTransport.ErrorMessage_ListenTimeout = \"No Ledger device found (timeout)\";\nTransport.ErrorMessage_NoDeviceFound = \"No Ledger device found\";\nexport default Transport;\n//# sourceMappingURL=Transport.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a;\nimport semver from \"semver\";\n/**\n * The USB product IDs will be defined as MMII, encoding a model (MM) and an interface bitfield (II)\n *\n ** Model\n * Ledger Nano S : 0x10\n * Ledger Blue : 0x00\n * Ledger Nano X : 0x40\n *\n ** Interface support bitfield\n * Generic HID : 0x01\n * Keyboard HID : 0x02\n * U2F : 0x04\n * CCID : 0x08\n * WebUSB : 0x10\n */\nexport var IIGenericHID = 0x01;\nexport var IIKeyboardHID = 0x02;\nexport var IIU2F = 0x04;\nexport var IICCID = 0x08;\nexport var IIWebUSB = 0x10;\nexport var DeviceModelId;\n(function (DeviceModelId) {\n    DeviceModelId[\"blue\"] = \"blue\";\n    DeviceModelId[\"nanoS\"] = \"nanoS\";\n    DeviceModelId[\"nanoSP\"] = \"nanoSP\";\n    DeviceModelId[\"nanoX\"] = \"nanoX\";\n    DeviceModelId[\"nanoFTS\"] = \"nanoFTS\";\n})(DeviceModelId || (DeviceModelId = {}));\nvar devices = (_a = {},\n    _a[DeviceModelId.blue] = {\n        id: DeviceModelId.blue,\n        productName: \"Ledger Blue\",\n        productIdMM: 0x00,\n        legacyUsbProductId: 0x0000,\n        usbOnly: true,\n        memorySize: 480 * 1024,\n        masks: [0x31000000, 0x31010000],\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; }\n    },\n    _a[DeviceModelId.nanoS] = {\n        id: DeviceModelId.nanoS,\n        productName: \"Ledger Nano S\",\n        productIdMM: 0x10,\n        legacyUsbProductId: 0x0001,\n        usbOnly: true,\n        memorySize: 320 * 1024,\n        masks: [0x31100000],\n        getBlockSize: function (firmwareVersion) {\n            var _a;\n            return semver.lt((_a = semver.coerce(firmwareVersion)) !== null && _a !== void 0 ? _a : \"\", \"2.0.0\")\n                ? 4 * 1024\n                : 2 * 1024;\n        }\n    },\n    _a[DeviceModelId.nanoSP] = {\n        id: DeviceModelId.nanoSP,\n        productName: \"Ledger Nano S Plus\",\n        productIdMM: 0x50,\n        legacyUsbProductId: 0x0005,\n        usbOnly: true,\n        memorySize: 1536 * 1024,\n        masks: [0x33100000],\n        getBlockSize: function (_firmwareVersion) { return 32; }\n    },\n    _a[DeviceModelId.nanoX] = {\n        id: DeviceModelId.nanoX,\n        productName: \"Ledger Nano X\",\n        productIdMM: 0x40,\n        legacyUsbProductId: 0x0004,\n        usbOnly: false,\n        memorySize: 2 * 1024 * 1024,\n        masks: [0x33000000],\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; },\n        bluetoothSpec: [\n            {\n                serviceUuid: \"13d63400-2c97-0004-0000-4c6564676572\",\n                notifyUuid: \"13d63400-2c97-0004-0001-4c6564676572\",\n                writeUuid: \"13d63400-2c97-0004-0002-4c6564676572\",\n                writeCmdUuid: \"13d63400-2c97-0004-0003-4c6564676572\"\n            },\n        ]\n    },\n    _a[DeviceModelId.nanoFTS] = {\n        id: DeviceModelId.nanoFTS,\n        productName: \"Ledger Nano FTS\",\n        productIdMM: 0x60,\n        legacyUsbProductId: 0x0006,\n        usbOnly: false,\n        memorySize: 2 * 1024 * 1024,\n        masks: [0x33200000],\n        getBlockSize: function (_firwareVersion) { return 4 * 1024; },\n        bluetoothSpec: [\n            {\n                serviceUuid: \"13d63400-2c97-6004-0000-4c6564676572\",\n                notifyUuid: \"13d63400-2c97-6004-0001-4c6564676572\",\n                writeUuid: \"13d63400-2c97-6004-0002-4c6564676572\",\n                writeCmdUuid: \"13d63400-2c97-6004-0003-4c6564676572\"\n            },\n        ]\n    },\n    _a);\nvar productMap = {\n    Blue: DeviceModelId.blue,\n    \"Nano S\": DeviceModelId.nanoS,\n    \"Nano S Plus\": DeviceModelId.nanoSP,\n    \"Nano X\": DeviceModelId.nanoX,\n    \"Nano FTS\": DeviceModelId.nanoFTS\n};\nvar devicesList = Object.values(devices);\n/**\n *\n */\nexport var ledgerUSBVendorId = 0x2c97;\n/**\n *\n */\nexport var getDeviceModel = function (id) {\n    var info = devices[id];\n    if (!info)\n        throw new Error(\"device '\" + id + \"' does not exist\");\n    return info;\n};\n/**\n * Given a `targetId`, return the deviceModel associated to it,\n * based on the first two bytes.\n */\nexport var identifyTargetId = function (targetId) {\n    var deviceModel = devicesList.find(function (_a) {\n        var masks = _a.masks;\n        return masks.find(function (mask) { return (targetId & 0xffff0000) === mask; });\n    });\n    return deviceModel;\n};\n/**\n *\n */\nexport var identifyUSBProductId = function (usbProductId) {\n    var legacy = devicesList.find(function (d) { return d.legacyUsbProductId === usbProductId; });\n    if (legacy)\n        return legacy;\n    var mm = usbProductId >> 8;\n    var deviceModel = devicesList.find(function (d) { return d.productIdMM === mm; });\n    return deviceModel;\n};\nexport var identifyProductName = function (productName) {\n    var deviceModel = devicesList.find(function (d) { return d.id === productMap[productName]; });\n    return deviceModel;\n};\nvar bluetoothServices = [];\nvar serviceUuidToInfos = {};\nfor (var id in devices) {\n    var deviceModel = devices[id];\n    var bluetoothSpec = deviceModel.bluetoothSpec;\n    if (bluetoothSpec) {\n        for (var i = 0; i < bluetoothSpec.length; i++) {\n            var spec = bluetoothSpec[i];\n            bluetoothServices.push(spec.serviceUuid);\n            serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, \"\")] = __assign({ deviceModel: deviceModel }, spec);\n        }\n    }\n}\n/**\n *\n */\nexport var getBluetoothServiceUuids = function () { return bluetoothServices; };\n/**\n *\n */\nexport var getInfosForServiceUuid = function (uuid) { return serviceUuidToInfos[uuid.toLowerCase()]; };\n//# sourceMappingURL=index.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport Transport from \"@ledgerhq/hw-transport\";\nimport hidFraming from \"@ledgerhq/devices/lib/hid-framing\";\nimport { identifyUSBProductId, ledgerUSBVendorId } from \"@ledgerhq/devices\";\nimport { log } from \"@ledgerhq/logs\";\nimport { TransportOpenUserCancelled, DisconnectedDeviceDuringOperation, DisconnectedDevice, TransportError, } from \"@ledgerhq/errors\";\nvar ledgerDevices = [\n    {\n        vendorId: ledgerUSBVendorId\n    },\n];\nvar isSupported = function () {\n    return Promise.resolve(!!(window.navigator && window.navigator.hid));\n};\nvar getHID = function () {\n    // $FlowFixMe\n    var hid = navigator.hid;\n    if (!hid)\n        throw new TransportError(\"navigator.hid is not supported\", \"HIDNotSupported\");\n    return hid;\n};\nfunction requestLedgerDevices() {\n    return __awaiter(this, void 0, void 0, function () {\n        var device;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, getHID().requestDevice({\n                        filters: ledgerDevices\n                    })];\n                case 1:\n                    device = _a.sent();\n                    if (Array.isArray(device))\n                        return [2 /*return*/, device];\n                    return [2 /*return*/, [device]];\n            }\n        });\n    });\n}\nfunction getLedgerDevices() {\n    return __awaiter(this, void 0, void 0, function () {\n        var devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, getHID().getDevices()];\n                case 1:\n                    devices = _a.sent();\n                    return [2 /*return*/, devices.filter(function (d) { return d.vendorId === ledgerUSBVendorId; })];\n            }\n        });\n    });\n}\nfunction getFirstLedgerDevice() {\n    return __awaiter(this, void 0, void 0, function () {\n        var existingDevices, devices;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, getLedgerDevices()];\n                case 1:\n                    existingDevices = _a.sent();\n                    if (existingDevices.length > 0)\n                        return [2 /*return*/, existingDevices[0]];\n                    return [4 /*yield*/, requestLedgerDevices()];\n                case 2:\n                    devices = _a.sent();\n                    return [2 /*return*/, devices[0]];\n            }\n        });\n    });\n}\n/**\n * WebHID Transport implementation\n * @example\n * import TransportWebHID from \"@ledgerhq/hw-transport-webhid\";\n * ...\n * TransportWebHID.create().then(transport => ...)\n */\nvar TransportWebHID = /** @class */ (function (_super) {\n    __extends(TransportWebHID, _super);\n    function TransportWebHID(device) {\n        var _this = _super.call(this) || this;\n        _this.channel = Math.floor(Math.random() * 0xffff);\n        _this.packetSize = 64;\n        _this.inputs = [];\n        _this.read = function () {\n            if (_this.inputs.length) {\n                return Promise.resolve(_this.inputs.shift());\n            }\n            return new Promise(function (success) {\n                _this.inputCallback = success;\n            });\n        };\n        _this.onInputReport = function (e) {\n            var buffer = Buffer.from(e.data.buffer);\n            if (_this.inputCallback) {\n                _this.inputCallback(buffer);\n                _this.inputCallback = null;\n            }\n            else {\n                _this.inputs.push(buffer);\n            }\n        };\n        _this._disconnectEmitted = false;\n        _this._emitDisconnect = function (e) {\n            if (_this._disconnectEmitted)\n                return;\n            _this._disconnectEmitted = true;\n            _this.emit(\"disconnect\", e);\n        };\n        /**\n         * Exchange with the device using APDU protocol.\n         * @param apdu\n         * @returns a promise of apdu response\n         */\n        _this.exchange = function (apdu) { return __awaiter(_this, void 0, void 0, function () {\n            var b;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.exchangeAtomicImpl(function () { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, channel, packetSize, framing, blocks, i, result, acc, buffer;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        _a = this, channel = _a.channel, packetSize = _a.packetSize;\n                                        log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n                                        framing = hidFraming(channel, packetSize);\n                                        blocks = framing.makeBlocks(apdu);\n                                        i = 0;\n                                        _b.label = 1;\n                                    case 1:\n                                        if (!(i < blocks.length)) return [3 /*break*/, 4];\n                                        return [4 /*yield*/, this.device.sendReport(0, blocks[i])];\n                                    case 2:\n                                        _b.sent();\n                                        _b.label = 3;\n                                    case 3:\n                                        i++;\n                                        return [3 /*break*/, 1];\n                                    case 4:\n                                        if (!!(result = framing.getReducedResult(acc))) return [3 /*break*/, 6];\n                                        return [4 /*yield*/, this.read()];\n                                    case 5:\n                                        buffer = _b.sent();\n                                        acc = framing.reduceResponse(acc, buffer);\n                                        return [3 /*break*/, 4];\n                                    case 6:\n                                        log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n                                        return [2 /*return*/, result];\n                                }\n                            });\n                        }); })[\"catch\"](function (e) {\n                            if (e && e.message && e.message.includes(\"write\")) {\n                                _this._emitDisconnect(e);\n                                throw new DisconnectedDeviceDuringOperation(e.message);\n                            }\n                            throw e;\n                        })];\n                    case 1:\n                        b = _a.sent();\n                        return [2 /*return*/, b];\n                }\n            });\n        }); };\n        _this.device = device;\n        _this.deviceModel =\n            typeof device.productId === \"number\"\n                ? identifyUSBProductId(device.productId)\n                : undefined;\n        device.addEventListener(\"inputreport\", _this.onInputReport);\n        return _this;\n    }\n    /**\n     * Similar to create() except it will always display the device permission (even if some devices are already accepted).\n     */\n    TransportWebHID.request = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, device;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, requestLedgerDevices()];\n                    case 1:\n                        _a = __read.apply(void 0, [_b.sent(), 1]), device = _a[0];\n                        return [2 /*return*/, TransportWebHID.open(device)];\n                }\n            });\n        });\n    };\n    /**\n     * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).\n     */\n    TransportWebHID.openConnected = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var devices;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getLedgerDevices()];\n                    case 1:\n                        devices = _a.sent();\n                        if (devices.length === 0)\n                            return [2 /*return*/, null];\n                        return [2 /*return*/, TransportWebHID.open(devices[0])];\n                }\n            });\n        });\n    };\n    /**\n     * Create a Ledger transport with a HIDDevice\n     */\n    TransportWebHID.open = function (device) {\n        return __awaiter(this, void 0, void 0, function () {\n            var transport, onDisconnect;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, device.open()];\n                    case 1:\n                        _a.sent();\n                        transport = new TransportWebHID(device);\n                        onDisconnect = function (e) {\n                            if (device === e.device) {\n                                getHID().removeEventListener(\"disconnect\", onDisconnect);\n                                transport._emitDisconnect(new DisconnectedDevice());\n                            }\n                        };\n                        getHID().addEventListener(\"disconnect\", onDisconnect);\n                        return [2 /*return*/, transport];\n                }\n            });\n        });\n    };\n    /**\n     * Release the transport device\n     */\n    TransportWebHID.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.exchangeBusyPromise];\n                    case 1:\n                        _a.sent();\n                        this.device.removeEventListener(\"inputreport\", this.onInputReport);\n                        return [4 /*yield*/, this.device.close()];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    TransportWebHID.prototype.setScrambleKey = function () { };\n    /**\n     * Check if WebUSB transport is supported.\n     */\n    TransportWebHID.isSupported = isSupported;\n    /**\n     * List the WebUSB devices that was previously authorized by the user.\n     */\n    TransportWebHID.list = getLedgerDevices;\n    /**\n     * Actively listen to WebUSB devices and emit ONE device\n     * that was either accepted before, if not it will trigger the native permission UI.\n     *\n     * Important: it must be called in the context of a UI click!\n     */\n    TransportWebHID.listen = function (observer) {\n        var unsubscribed = false;\n        getFirstLedgerDevice().then(function (device) {\n            if (!device) {\n                observer.error(new TransportOpenUserCancelled(\"Access denied to use Ledger device\"));\n            }\n            else if (!unsubscribed) {\n                var deviceModel = typeof device.productId === \"number\"\n                    ? identifyUSBProductId(device.productId)\n                    : undefined;\n                observer.next({\n                    type: \"add\",\n                    descriptor: device,\n                    deviceModel: deviceModel\n                });\n                observer.complete();\n            }\n        }, function (error) {\n            observer.error(new TransportOpenUserCancelled(error.message));\n        });\n        function unsubscribe() {\n            unsubscribed = true;\n        }\n        return {\n            unsubscribe: unsubscribe\n        };\n    };\n    return TransportWebHID;\n}(Transport));\nexport default TransportWebHID;\n//# sourceMappingURL=TransportWebHID.js.map"],"names":["errors_1","__webpack_require__","initialAcc","data","Buffer","alloc","dataLength","sequence","exports","Z","channel","packetSize","makeBlocks","apdu","value","b","concat","length","writeUInt16BE","blockSize","nbBlocks","Math","ceil","fill","blocks","i","head","writeUInt8","chunk","slice","push","reduceResponse","acc","_a","readUInt16BE","TransportError","readUInt8","chunkData","getReducedResult","DeviceModelId","extendStatics","id","subscribers","log","type","message","obj","String","date","Date","dispatch","trace","context","LocalTracer","constructor","getContext","setContext","updateContext","contextToAdd","Object","assign","getType","setType","withType","withContext","withUpdatedContext","e","console","error","window","__ledgerLogsListen","cb","indexOf","pop","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","adopt","then","apply","Transport","logType","exchangeTimeout","unresponsiveTimeout","deviceModel","_events","events_default","send","cla_1","ins_1","p1_1","p2_1","args_1","cla","ins","p1","p2","statusList","lib_es","StatusCodes","OK","abortTimeoutMs","tracer","function","response","exchange","from","sw","some","s","TransportStatusError","_appAPIlock","_apdu","_abortTimeoutMs","exchangeBulk","apdus","observer","unsubscribed","main","r","status","complete","unsubscribe","setScrambleKey","_key","close","on","eventName","off","removeListener","emit","event","args","setDebugMode","warn","setExchangeTimeout","setExchangeUnresponsiveTimeout","create","openTimeout","listenTimeout","found","sub","listen","listenTimeoutId","clearTimeout","open","descriptor","ErrorMessage_NoDeviceFound","setTimeout","ErrorMessage_ListenTimeout","exchangeAtomicImpl","f","resolveBusy","exchangeBusyPromise","TransportRaceCondition","busyPromise","unresponsiveReached","timeout","res","decorateAppAPIMethods","self","methods","scrambleKey","methodName","decorateAppAPIMethod","ctx","setTraceContext","updateTraceContext","getTraceContext","__assign","t","n","arguments","p","prototype","hasOwnProperty","call","devices","blue","productName","productIdMM","legacyUsbProductId","usbOnly","memorySize","masks","getBlockSize","_firwareVersion","nanoS","firmwareVersion","semver_default","lt","coerce","nanoSP","_firmwareVersion","nanoX","bluetoothSpec","serviceUuid","notifyUuid","writeUuid","writeCmdUuid","nanoFTS","devicesList","values","identifyUSBProductId","usbProductId","legacy","find","d","mm","bluetoothServices","serviceUuidToInfos","lib_es_id","spec","replace","__extends","setPrototypeOf","__proto__","Array","__","TransportWebHID_awaiter","__generator","body","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","__read","o","m","ar","ledgerDevices","vendorId","isSupported","navigator","hid","getHID","requestLedgerDevices","device","requestDevice","filters","isArray","getLedgerDevices","getDevices","filter","lib_es_TransportWebHID","_super","TransportWebHID","_this","floor","random","inputs","read","shift","success","inputCallback","onInputReport","buffer","TransportWebHID_Buffer","_disconnectEmitted","_emitDisconnect","framing","_b","toString","hid_framing","sendReport","includes","DisconnectedDeviceDuringOperation","productId","undefined","addEventListener","request","openConnected","transport","onDisconnect","removeEventListener","DisconnectedDevice","list","getFirstLedgerDevice","existingDevices","TransportOpenUserCancelled"],"sourceRoot":""}